/* automatically generated by rust-bindgen 0.61.0 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const W_MAX_PATH: u32 = 260;
pub const W_SUCCESS: u32 = 0;
pub const W_FAILURE: i32 = -1;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
extern "C" {
    #[doc = " compress stream using lzma algorithm"]
    #[doc = " @param p_dst is the destination buffer"]
    #[doc = " @param p_dst_len is length of the destination buffer"]
    #[doc = " @param p_src is the source buffer"]
    #[doc = " @param p_src_len is length of the source buffer"]
    #[doc = " @param p_type type of LZMA algorithm (0 = LZMA1 and 1 = LZMA2)"]
    #[doc = " @param p_level 0 <= level <= 9"]
    #[doc = " @returns zero on success"]
    pub fn w_lzma_compress(
        p_dst: *mut *mut u8,
        p_dst_len: *mut usize,
        p_src: *const u8,
        p_src_len: usize,
        p_type: u8,
        p_level: u32,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[doc = " decompress stream using lzma algorithm"]
    #[doc = " @param p_dst is the destination buffer"]
    #[doc = " @param p_dst_len is length of the destination buffer"]
    #[doc = " @param p_src is the source buffer"]
    #[doc = " @param p_src_len is length of the source buffer"]
    #[doc = " @param p_type type of LZMA algorithm (0 = LZMA1 and 1 = LZMA2)"]
    #[doc = " @returns zero on success"]
    pub fn w_lzma_decompress(
        p_dst: *mut *mut u8,
        p_dst_len: *mut usize,
        p_src: *const u8,
        p_src_len: usize,
        p_type: u8,
    ) -> ::std::os::raw::c_longlong;
}

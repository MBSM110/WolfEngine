/* automatically generated by rust-bindgen 0.60.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const W_MAX_PATH: u32 = 260;
pub type size_t = ::std::os::raw::c_ulonglong;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub const w_ffmpeg_action_W_ENCODE: w_ffmpeg_action = 0;
pub const w_ffmpeg_action_W_DECODE: w_ffmpeg_action = 1;
pub type w_ffmpeg_action = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct w_ffmpeg_ctx_t {
    _unused: [u8; 0],
}
pub type w_ffmpeg_ctx = *mut w_ffmpeg_ctx_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct w_ffmpeg_opt_t {
    pub fps: ::std::os::raw::c_int,
    pub width: i64,
    pub height: i64,
    pub bitrate: i64,
    pub codec_id: ::std::os::raw::c_int,
    pub type_: w_ffmpeg_action,
    pub ctx: w_ffmpeg_ctx,
}
pub type w_ffmpeg_opt = *mut w_ffmpeg_opt_t;
extern "C" {
    #[doc = " initialize ffmpeg"]
    #[doc = " @param p_ffmpeg_opt the ffmpeg options"]
    #[doc = " @param p_error the error buffer"]
    #[doc = " @return int the result of encoding the frame"]
    pub fn w_ffmpeg_init(
        p_ffmpeg_opt: w_ffmpeg_opt,
        p_error: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " encode the frame"]
    #[doc = " @param p_ffmpeg_opt the ffmpeg options"]
    #[doc = " @param p_data_in the input rgb buffer"]
    #[doc = " @param p_data_out the output encoded buffer"]
    #[doc = " @param p_size_out the size of encoded buffer"]
    #[doc = " @param p_error the error buffer"]
    #[doc = " @return int the result of encoding the frame"]
    pub fn w_ffmpeg_encode(
        p_ffmpeg_opt: w_ffmpeg_opt,
        p_data_in: *mut u8,
        p_data_out: *mut *mut u8,
        p_size_out: *mut ::std::os::raw::c_int,
        p_error: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " decode the frame"]
    #[doc = " @param p_ffmpeg_opt the ffmpeg options"]
    #[doc = " @param p_data_in the input decode data"]
    #[doc = " @param p_data_size the size of input decode data"]
    #[doc = " @param p_data_out the output buffer containing the decoded data"]
    #[doc = " @param p_size_out the size of decoded buffer"]
    #[doc = " @param p_error the error buffer"]
    #[doc = " @return int the result of encoding the frame"]
    pub fn w_ffmpeg_decode(
        p_ffmpeg_opt: w_ffmpeg_opt,
        p_data_in: *mut u8,
        p_data_size: ::std::os::raw::c_int,
        p_data_out: *mut *mut u8,
        p_size_out: *mut ::std::os::raw::c_int,
        p_error: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " encode the frame"]
    #[doc = " @param p_ffmpeg_ctx the ffmpeg parameters"]
    #[doc = " @param p_error the error buffer"]
    pub fn w_ffmpeg_fini(p_ffmpeg_opt: w_ffmpeg_opt);
}
